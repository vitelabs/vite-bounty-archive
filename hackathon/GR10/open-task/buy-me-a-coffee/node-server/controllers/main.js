var express = require('express');
var router = express.Router();
var path = require('path');
const got = require('got');
const { WS_RPC } = require('@vite/vitejs-ws');
const { ViteAPI, wallet, utils, abi, accountBlock, keystore } =require('@vite/vitejs');

const seed = "your_seed";
const connection = new WS_RPC('wss://buidl.vite.net/gvite/ws');
const provider = new ViteAPI(connection, () => {
    console.log("client connected");
});

const myAccount = wallet.getWallet(seed).deriveAddress(0);
const recipientAccount = wallet.getWallet(seed).deriveAddress(0);

const CONTRACT = {
    binary: 'binary_code',    // binary code
    abi: [{ "constant":true, "inputs":[{"name":"_id","type":"uint256"}],
        "name":"getCup","outputs":[{"name":"configuration","type":"uint256"},
            {"name":"owner","type":"address"},
            {"name":"recipient","type":"address"},
            {"name":"amount","type":"uint32"}],"payable":false,"stateMutability":"view","type":"offchain"},
        {"constant":false,"inputs":[{"name":"recipient_","type":"address"},
                {"name":"amount_","type":"uint32"},
                {"name":"configuration_","type":"uint256"}],
            "name":"_createCup","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},
        {"anonymous":false,"inputs":[{"indexed":false,"name":"owner","type":"address"},
                {"indexed":false,"name":"cupConfiguration","type":"uint256"},
                {"indexed":false,"name":"newCupId","type":"uint256"},
                {"indexed":false,"name":"amount","type":"uint256"}],
            "name":"CupCreated","type":"event"}],
    offChain: 'binary_offchain_code',
    address: 'contract_address',
};

CONTRACT.address = 'contract_address'; //e.g vite_3055a2315c1096a9e506a278f14a87ff7a62c69b7c55a24d00 on testnet

async function receiveTransaction(account) {
    // get the first unreceived tx
    const data = await provider.request('ledger_getUnreceivedBlocksByAddress', account.address, 0, 1);
    if (!data || !data.length) {
        console.log('[LOG] No Unreceived Blocks');
        return;
    }
    // create a receive tx
    const ab = accountBlock.createAccountBlock('receive', {
        address: account.address,
        sendBlockHash: data[0].hash
    }).setProvider(provider).setPrivateKey(account.privateKey);

    await ab.autoSetPreviousAccountBlock();
    const result = await ab.sign().send();
    console.log('receive success', result);
}

async function sendTx(account, address ,amount) {
    const ab = accountBlock.createAccountBlock('send', {
        address: account.address,
        toAddress: address,
        amount
    }).setProvider(provider).setPrivateKey(account.privateKey);

    await ab.autoSetPreviousAccountBlock();
    const result = await ab.sign().send();
    console.log('send success', result);
}

async function callContract(account, methodName, abi, params, amount) {
    const block = accountBlock.createAccountBlock('callContract', {
        address: account.address,
        abi,
        methodName,
        amount,
        toAddress: CONTRACT.address,
        params
    }).setProvider(provider).setPrivateKey(account.privateKey);

    await block.autoSetPreviousAccountBlock();
    const result = await block.sign().send();
    console.log('call success', result);
};

router.get('/', async function(req, res, next) {
    res.render('public/index', { layout: "empty", page_title: 'Welcome', page_description:"" });
});

router.route('/enter-details').get(async function(req, res, next) {
    res.render('public/enter_details', { layout: "empty", page_title: 'Enter Details', page_description:"" });
}).post(async function(req, res, next) {
    await callContract(myAccount, 'getCup', CONTRACT.abi, [0], '0');
    await sendTx(myAccount, recipientAccount.address, '1');
    await receiveTransaction(recipientAccount);
    res.redirect('/coupon');
});

router.route('/quiz').get(async function(req, res, next) {
    res.render('public/donate', { layout: "empty", page_title: 'Choose your style', page_description:"" });
}).post(async function(req, res, next) {
    console.log(req.body);
    res.json(req.body)
});

router.route('/cup').get(async function(req, res, next) {
    num = Math.floor(Math.random() * (10)) + 1;
    await callContract(myAccount, '_createCup', CONTRACT.abi, [recipientAccount.address, 10, num], '0');
    await sendTx(myAccount, recipientAccount.address, '1');
    await receiveTransaction(recipientAccount);
    image = "";
    res.render('public/coffee_cup', { layout: "empty", img: image, page_title: 'Your Cup', page_description:"" });
});

router.route('/hackathon-video').get(async function (req, res, next){
    res.redirect('https://youtu.be/AVTG_6WZLt0');
});

router.route('/coupon').get(async function(req, res, next) {
    num = Math.floor(Math.random() * (10)) + 1;
    await callContract(myAccount, '_createCup', CONTRACT.abi, [myAccount.address, 5, num], '0');
    await sendTx(myAccount, recipientAccount.address, '1');
    await receiveTransaction(recipientAccount);
    image = "";
    res.render('public/coupon', { layout: "empty", temperature: "43", img: image, page_title: 'Coupon', page_description:"" });
}).post(async function(req, res, next) {
    console.log(req.body); res.json(req.body)
});

router.get('/error', function(req, res, next) {
    res.render('public/error', { layout: "empty", page_title: 'Error'});
});

router.get('/robots.txt', (req,res,next)=>{
    res.sendFile(path.resolve('public/robots.txt') );
});

module.exports = router;
