// SPDX-License-Identifier: MIT
// Vite Standard Assets v0.1.0 (IVSA unified interface)

pragma soliditypp >=0.7.0 <0.9.0;

interface IVSA {
    event Approval(
        address indexed account,
        address indexed operator,
        uint256 id,
        uint256 value
    );

    event ApprovalForAll(address indexed account, address indexed operator, bool approved);

    event TransferSingle(
        address indexed operator,
        address indexed from,
        address indexed to,
        uint256 id,
        uint256 value
    );

    event TransferBatch(
        address indexed operator,
        address indexed from,
        address indexed to,
        uint256[] ids,
        uint256[] values
    );

    function name(uint256 id) offchain view returns (string memory);

    function nameAsync(uint256 id) external view async returns (string memory);

    function symbol(uint256 id) offchain view returns (string memory);

    function symbolAsync(uint256 id) external view async returns (string memory);

    function decimals(uint256 id) offchain view returns (uint256);

    function decimalsAsync(uint256 id) external view async returns (uint256);

    function totalSupply(uint256 id) offchain view returns (uint256);

    function totalSupplyAsync(uint256 id) external view async returns (uint256);

    function ownerOf(uint256 id) offchain view returns (address);

    function ownerOfAsync(uint256 id) external view async returns (address);

    function createToken(
        address owner,
        uint256 id,
        string memory name_,
        string memory symbol_,
        uint256 decimals_
    ) external async;

    function balanceOf(address account, uint256 id) offchain view returns (uint256);

    function balanceOfAsync(address account, uint256 id) external view async returns (uint256);

    function balanceOfBatch(
        address[] memory accounts,
        uint256[] memory ids
    ) offchain view returns (uint256[] memory);

    function balanceOfBatchAsync(
        address[] memory accounts,
        uint256[] memory ids
    ) external view async returns (uint256[] memory);

    function allowance(
        address account, address operator, uint256 id
    ) offchain view returns (uint256);

    function allowanceAsync(
        address account, address operator, uint256 id
    ) external view async returns (uint256);

    function approve(address operator, uint256 id, uint256 amount) external async;

    function isApprovedForAll(
        address account, address operator
    ) offchain view returns (bool);

    function isApprovedForAllAsync(
        address account, address operator
    ) external view async returns (bool);

    function approveForAll(address operator, bool approved) external async;

    function transfer(
        address to,
        uint256 id,
        uint256 amount
    ) external async;

    function safeTransfer(
        address to,
        uint256 id,
        uint256 amount
    ) external async;

    function safeTransfer(
        address to,
        uint256 id,
        uint256 amount,
        bytes memory data
    ) external async;

    function transferBatch(
        address to,
        uint256[] memory ids,
        uint256[] memory amounts
    ) external async;

    function safeTransferBatch(
        address to,
        uint256[] memory ids,
        uint256[] memory amounts
    ) external async;

    function safeTransferBatch(
        address to,
        uint256[] memory ids,
        uint256[] memory amounts,
        bytes memory data
    ) external async;

    function transferFrom(
        address from,
        address to,
        uint256 id,
        uint256 amount
    ) external async;

    function safeTransferFrom(
        address from,
        address to,
        uint256 id,
        uint256 amount
    ) external async;

    function safeTransferFrom(
        address from,
        address to,
        uint256 id,
        uint256 amount,
        bytes memory data
    ) external async;

    function transferFromBatch(
        address from,
        address to,
        uint256[] memory ids,
        uint256[] memory amounts
    ) external async;

    function safeTransferFromBatch(
        address from,
        address to,
        uint256[] memory ids,
        uint256[] memory amounts
    ) external async;

    function safeTransferFromBatch(
        address from,
        address to,
        uint256[] memory ids,
        uint256[] memory amounts,
        bytes memory data
    ) external async;

    function mint(address to, uint256 id, uint256 amount) external async;

    function safeMint(address to, uint256 id, uint256 amount) external async;

    function safeMint(address to, uint256 id, uint256 amount, bytes memory data) external async;

    function mintBatch(address to, uint256[] memory ids, uint256[] memory amounts) external async;

    function safeMintBatch(
        address to,
        uint256[] memory ids,
        uint256[] memory amounts
    ) external async;

    function safeMintBatch(
        address to,
        uint256[] memory ids,
        uint256[] memory amounts,
        bytes memory data
    ) external async;

    function burn(address from, uint256 id, uint256 amount) external async;

    function burnBatch(address from, uint256[] memory ids, uint256[] memory amounts) external async;
}
